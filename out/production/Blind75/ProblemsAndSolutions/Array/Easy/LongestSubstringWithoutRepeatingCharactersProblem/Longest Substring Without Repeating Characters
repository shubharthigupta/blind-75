## 🧠 Longest Substring Without Repeating Characters

---

### 📘 Problem Statement:

> Given a string `s`, find the length of the **longest substring** without repeating characters.


### 📌 Example:

```java
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
```


### 🔒 Constraints:

* `0 <= s.length <= 5 * 10⁴`
* `s` consists of English letters, digits, symbols, and spaces.

---

## ✅ Key Idea:

Use a **sliding window** approach with a **HashSet** or **HashMap** to track characters in the current window:

1. Expand the window by moving the right pointer.
2. If a character is repeated, shrink the window by moving the left pointer until the duplicate is removed.
3. Track the **maximum window length** encountered.


## 💡 Notes to Memorize:

* **Sliding window + set** is the core strategy here.
* Window is adjusted dynamically: expand when valid, shrink when a repeat is found.
* Avoid nested loops—achieve linear time using HashMap or HashSet.


### 🛠️ High-Level Steps:

* Initialize two pointers `left` and `right`, and a `Set` to store characters.
* Traverse the string with `right`:

    * If `s[right]` is not in the set, add it and update max length.
    * If it is, remove `s[left]` from the set and move `left++`.
* Repeat until `right` reaches the end.


### ⏱️ Time and Space Complexity:

* **Time Complexity**: `O(n)` — Each character is visited at most twice.
* **Space Complexity**: `O(min(n, m))` — `n` is length of string, `m` is character set size (e.g., 128 for ASCII).
