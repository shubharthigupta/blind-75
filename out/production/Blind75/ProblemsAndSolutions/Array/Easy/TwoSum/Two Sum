## 🧠 Two Sum

---

### 📘 Problem Statement:

> Given an array of integers `nums` and an integer `target`, return **the indices** of the **two numbers** such that they **add up to target**.

You may assume that:

* Each input would have **exactly one solution**.
* You may not use the **same element twice**.

You can return the answer in **any order**.

### 📌 Example:

```java
Input: nums = [2, 7, 11, 15], target = 9  
Output: [0, 1] // Because nums[0] + nums[1] == 9
```

### 🔒 Constraints:

* `2 <= nums.length <= 10^4`
* `-10^9 <= nums[i] <= 10^9`
* `-10^9 <= target <= 10^9`
* Only one **unique** solution exists

---

## ✅ Key Idea:

Use a **HashMap** to store the numbers we've seen so far along with their indices. As we iterate:

1. For each element `num`, compute the complement: `target - num`.
2. Check if the **complement exists in the map**.

    * If it does → return `[map.get(complement), i]`
3. If not → store `num` and its index in the map for future checks.

## 💡 Notes to Memorize:

* **Always think about using a HashMap** when you need quick lookup of values.
* Storing complements is the trick to solving this in one pass.
* Avoid using nested loops—HashMap avoids O(n²) complexity.

### 🛠️ High-Level Steps:

* Create an empty map `Map<Integer, Integer>`.
* Loop through `nums`:

    * Check if `target - nums[i]` is in the map.
    * If yes → return the current index and the stored index.
    * Else → store `nums[i]` with its index.

### ⏱️ Time and Space Complexity:

* **Time Complexity**: `O(n)` — One pass through the array
* **Space Complexity**: `O(n)` — For storing elements in the HashMap

