## 🧠 Missing Number

---

### 📘 Problem Statement:

> Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the **only number in the range that is missing** from the array.


### 📌 Example:

```
Input: nums = [3, 0, 1]
Output: 2

Input: nums = [0, 1]
Output: 2

Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
```


### 🔒 Constraints:

* `n == nums.length`
* `1 <= n <= 10⁴`
* `0 <= nums[i] <= n`
* All the numbers of `nums` are **unique**

---

## ✅ Key Idea:

There are **3 common approaches**, each leveraging a unique insight:


### 🧠 Approach 1: **Math (Summation Formula)**

* Use the formula for the sum of the first `n` natural numbers:

    * `expectedSum = n * (n + 1) / 2`
* Subtract the actual sum of elements in `nums` from `expectedSum`
* The result is the missing number

✅ **Best approach for simplicity and performance**


### 🧠 Approach 2: **XOR Trick**

* XOR from `0` to `n` and XOR all elements in `nums`
* The result after full XOR will be the missing number:

    * `missing = (0 ^ 1 ^ 2 ^ ... ^ n) ^ (nums[0] ^ nums[1] ^ ... ^ nums[n-1])`
* This works due to the property: `a ^ a = 0` and `a ^ 0 = a`

✅ Efficient and no risk of overflow


### 🧠 Approach 3: **Hashing (Extra Space)**

* Create a `boolean[]` of size `n + 1` to mark seen numbers
* Scan for the index that is still false

🚫 Uses `O(n)` extra space


## 💡 Notes to Memorize:

* **Math trick** is simple but watch for integer overflow in other languages (not an issue in Java for this constraint).
* **XOR trick** is clean and works well with bitwise logic.
* Avoid sorting — it adds unnecessary complexity (`O(n log n)`).


### 🛠️ High-Level Steps (Math Approach):

1. Calculate `expectedSum = n * (n + 1) / 2`
2. Calculate `actualSum = sum of nums[]`
3. Return `expectedSum - actualSum`


### ⏱️ Time and Space Complexity:

| Approach   | Time Complexity | Space Complexity |
| ---------- | --------------- | ---------------- |
| Math / XOR | `O(n)`          | `O(1)`           |
| Hashing    | `O(n)`          | `O(n)`           |
| Sorting    | `O(n log n)`    | `O(1)` or `O(n)` |

