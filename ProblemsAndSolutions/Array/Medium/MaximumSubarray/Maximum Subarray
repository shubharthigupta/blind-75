## 🧠 Maximum Subarray

---

### 📘 Problem Statement:

> Given an integer array `nums`, find the **contiguous subarray** (containing at least one number) which has the **largest sum**, and return its sum.


### 📌 Example:

```
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6

Input: nums = [1]
Output: 1

Input: nums = [5,4,-1,7,8]
Output: 23
```


### 🔒 Constraints:

* `1 <= nums.length <= 10⁵`
* `-10⁴ <= nums[i] <= 10⁴`

---

## ✅ Key Idea:

Use **Kadane’s Algorithm**, which efficiently finds the maximum sum of a contiguous subarray in linear time:

1. Maintain two variables: `currentSum` and `maxSum`.
2. At each step, choose between extending the current subarray or starting fresh at the current element.
3. Track the highest value of `currentSum` seen so far in `maxSum`.


## 💡 Notes to Memorize:

* The problem is about **contiguous** subarrays.
* Kadane’s Algorithm uses a **greedy + dynamic approach**.
* If current subarray sum becomes negative, reset it to the current element.
* Great for problems involving maximum values in subarrays.


### 🛠️ High-Level Steps:

* Initialize `currentSum = nums[0]` and `maxSum = nums[0]`
* Loop through `nums` starting from index 1:

    * `currentSum = max(nums[i], currentSum + nums[i])`
    * `maxSum = max(maxSum, currentSum)`
* Return `maxSum` after loop


### ⏱️ Time and Space Complexity:

* **Time Complexity**: `O(n)` — One pass through the array
* **Space Complexity**: `O(1)` — Only constant space used

