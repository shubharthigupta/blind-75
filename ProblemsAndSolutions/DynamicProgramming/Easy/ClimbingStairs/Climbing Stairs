## 🧠 Climbing Stairs

---

### 📘 Problem Statement:

> You are climbing a staircase. It takes `n` steps to reach the top.
>
> Each time you can either climb **1 step** or **2 steps**.
> In how many distinct ways can you climb to the top?


### 📌 Example:

```
Input: n = 2
Output: 2
Explanation: 1 step + 1 step OR 2 steps

Input: n = 3
Output: 3
Explanation: 1+1+1, 1+2, 2+1
```

### 🔒 Constraints:

* `1 <= n <= 45`

---

## ✅ Key Idea:

This is a classic **Dynamic Programming** problem. The number of ways to reach step `n` is the sum of the ways to reach steps `n-1` and `n-2`.

This maps directly to the **Fibonacci sequence**, where:

* `ways(n) = ways(n - 1) + ways(n - 2)`


## 💡 Notes to Memorize:

* Treat this as a **DP or Fibonacci** problem:

    * Base cases:

        * `ways(1) = 1`
        * `ways(2) = 2`
* You can solve this using:

    * **Top-down (memoization)**
    * **Bottom-up (tabulation)**
    * **Space-optimized Fibonacci approach**


### 🛠️ High-Level Steps (Bottom-Up DP or Fibonacci):

1. Initialize two variables:

    * `first = 1` (ways to reach step 1)
    * `second = 2` (ways to reach step 2)
2. Loop from `3` to `n`:

    * `third = first + second`
    * Update `first = second`, `second = third`
3. Return `second` if `n >= 2`, else `first`

### ⏱️ Time and Space Complexity:

| Type     | Complexity                                  |
| -------- | ------------------------------------------- |
| ⏳ Time   | `O(n)` — single pass up to `n`              |
| 🧠 Space | `O(1)` — constant space using two variables |
